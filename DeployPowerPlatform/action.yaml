name: Deploy PowerPlatform Solution
author: Microsoft Corporation
inputs:
  shell:
    description: Shell in which you want to run the action (powershell or pwsh)
    required: false
    default: powershell
  actionsRepo:
    description: The AL-Go for GitHub Actions repository
    required: true
  environmentName:
    description: Name of environment to deploy to
    required: true
  artifactsFolder:
    description: Path to the downloaded artifacts to deploy (when deploying from a build)
    required: false
    default: ''
  solutionFolder:
    description: Path to the unpacked solution to deploy (when deploying from branch)
    required: false
    default: ''
  deploymentEnvironmentsJson:
    description: The settings for all Deployment Environments
    required: true
runs:
  using: composite
  steps:
    - name: Install Power Platform Tools
      uses: microsoft/powerplatform-actions/actions-install@v1

    - name: Get Actions Repo and Ref
      shell: ${{ inputs.shell }}
      env:
        _actionsRepo: ${{ inputs.actionsRepo }}
      run: |
        # Using hardcoded reference to microsoft/AL-Go-Actions inside composote actions doesn't work with preview nor direct development branches
        # For this reason, we get the actionsRepo from the calling workflow (which might be freddydk/AL-Go@PPP or microsoft/AL-Go@sha or microsoft/AL-Go-Actions@v4.1 )
        # Download actions to ./_AL-Go/Actions
        $actionsRef = $env:_actionsRepo.Split('@')[1]
        $actionsRepo = $env:_actionsRepo.Split('@')[0]
        $actionsPath = './_AL-Go/Actions'
        if ($actionsRepo -like '*/Actions') {
          $actionsRepo = $actionsRepo.SubString(0,$actionsRepo.Length-8)
          $actionsPath = './_AL-Go'
        }
        Add-Content -encoding utf8 -path $env:GITHUB_ENV -value "actionsRepo=$actionsRepo"
        Add-Content -encoding utf8 -path $env:GITHUB_ENV -value "actionsRef=$actionsRef"
        Add-Content -encoding utf8 -path $env:GITHUB_ENV -value "actionsPath=$actionsPath"

    - name: Check out AL-Go Actions
      uses: actions/checkout@v4
      with:
        repository: ${{ env.actionsRepo }}
        ref: ${{ env.actionsRef }}
        path: ${{ env.actionsPath }}

    - name: Parse DeployToSettings and AuthContext
      id: ReadPowerPlatformSettings
      uses: ./_AL-Go/Actions/ReadPowerPlatformSettings
      with:
        shell: ${{ inputs.shell }}
        deploymentEnvironmentsJson: ${{ inputs.deploymentEnvironmentsJson }} 
        environmentName: ${{ inputs.environmentName }}

    - name: Who am I (username)
      if: steps.ReadPowerPlatformSettings.outputs.ppUserName != ''
      uses: microsoft/powerplatform-actions/who-am-i@v1
      with:
        environment-url: ${{ steps.ReadPowerPlatformSettings.outputs.ppEnvironmentUrl}}
        user-name: ${{ steps.ReadPowerPlatformSettings.outputs.ppUserName }}
        password-secret: ${{ steps.ReadPowerPlatformSettings.outputs.ppPassword }}

    - name: Who am I (application ID)
      if: steps.ReadPowerPlatformSettings.outputs.ppApplicationId != ''
      uses: microsoft/powerplatform-actions/who-am-i@v1
      with:
        environment-url: ${{ steps.ReadPowerPlatformSettings.outputs.ppEnvironmentUrl }}
        tenant-id: ${{ steps.ReadPowerPlatformSettings.outputs.ppTenantId }}
        app-id: ${{ steps.ReadPowerPlatformSettings.outputs.ppApplicationId }}
        client-secret: ${{ steps.ReadPowerPlatformSettings.outputs.ppClientSecret }}
 
    - name: Determine Power Platform solution location
      env:
        _artifactsFolder: ${{ inputs.artifactsFolder }}
        _solutionFolder: ${{ inputs.solutionFolder }}
      shell: ${{ inputs.shell }}
      run: |
        if ($env:_artifactsFolder -ne '') {
          $artifactsFiles = Get-ChildItem -Path (Join-Path $ENV:GITHUB_WORKSPACE $ENV:_artifactsFolder) -Recurse -File | Select-Object -ExpandProperty FullName
          foreach($filePath in $artifactsFiles){
              ## Find file containing Power Platform keyword
              if($filePath.contains("-PowerPlatformSolution-")){
                  Write-Host "Power Platform solution file:"$filePath
                  Add-Content -encoding utf8 -path $env:GITHUB_ENV -value "powerPlatformSolutionFilePath=$filePath" 
                  Add-Content -encoding utf8 -path $env:GITHUB_ENV -value "powerPlatformSolutionFolder=.artifacts/_tempPPSolution/source"
                  return
              }
          }            
          Write-Warning "Not able to find Power Platform solution file in $ENV:_artifactsFolder"
          throw "Not able to find Power Platform solution file in $ENV:_artifactPath that contains the artifact keyword '-PowerPlatformSolution-'"
        }
        elseif ($env:_solutionFolder -ne '') {
          Add-Content -encoding utf8 -path $env:GITHUB_ENV -value "powerPlatformSolutionFolder=$env:_solutionFolder"
        }
        else {
          throw "No artifactsFolder or solutionFolder specified"
        }
  
    - name: Unpack solution artifact
      if: env.powerPlatformSolutionFilePath != ''
      uses: microsoft/powerplatform-actions/unpack-solution@v1
      with:
        solution-file: ${{ env.powerPlatformSolutionFilePath }}
        solution-folder: ${{ env.powerPlatformSolutionFolder }}
        solution-type: "Unmanaged"
        process-canvas-apps: true

    - name: Rebuild solution
      uses: ./_AL-Go/Actions/BuildPowerPlatform
      with:
        shell: ${{ inputs.shell }}
        solutionFolder: ${{ env.powerPlatformSolutionFolder }}
        outputFolder: .artifacts/_tempPPSolution
        outputFileName: ppsolution
        companyId: ${{ steps.ReadPowerPlatformSettings.outputs.companyId }}
        environmentName: ${{ steps.ReadPowerPlatformSettings.outputs.environmentName }}

    - name: Publish solution to Power Platform (userName)
      if: steps.ReadPowerPlatformSettings.outputs.ppUserName != ''
      uses: microsoft/powerplatform-actions/import-solution@v1
      with:
        user-name: ${{ steps.ReadPowerPlatformSettings.outputs.ppUserName }}
        password-secret: ${{ steps.ReadPowerPlatformSettings.outputs.ppPassword }}
        environment-url: ${{ steps.ReadPowerPlatformSettings.outputs.ppEnvironmentUrl }}
        solution-file: .artifacts/_tempPPSolution/ppsolution.zip
        force-overwrite: true
        publish-changes: true

    - name: Publish solution to Power Platform (ApplicationId)
      if: steps.ReadPowerPlatformSettings.outputs.ppApplicationId != ''
      uses: microsoft/powerplatform-actions/import-solution@v1
      with:
        tenant-id: ${{ steps.ReadPowerPlatformSettings.outputs.ppTenantId }}
        app-id: ${{ steps.ReadPowerPlatformSettings.outputs.ppApplicationId }}
        client-secret: ${{ steps.ReadPowerPlatformSettings.outputs.ppClientSecret }}
        environment-url: ${{ steps.ReadPowerPlatformSettings.outputs.ppEnvironmentUrl }}
        solution-file: .artifacts/_tempPPSolution/ppsolution.zip
        force-overwrite: true
        publish-changes: true

branding:
  icon: terminal
  color: blue
